name: Android CI

on: 
  watch:
    types: [started]
  schedule:
    - cron: '0 */6 * * *'

jobs:
  check_release:
    if: github.repository_owner == github.actor
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 14
     
    - name: check latest tag
      shell: bash
      env:
        SECRETS_MINIFY: ${{ secrets.MINIFY }}
        SECRETS_RENAME: ${{ secrets.RENAME }}
      run: source $GITHUB_WORKSPACE/action_schedule.sh
    
    - name: check if release
      id: check_release
      shell: bash
      run: |
        function version_gt() { test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1"; }
        if version_gt $APP_LATEST_TAG $APP_LAST_TAG; then
          git clone $APP_GIT_URL $APP_WORKSPACE
          cd $APP_WORKSPACE
          git checkout $LATEST_TAG 
          echo ::set-output name=if_release::true
        fi
        
    - name: build apk
      id: build_apk
      if: steps.check_release.outputs.if_release == 'true'
      shell: bash
      run: |
        source $GITHUB_WORKSPACE/action_app_custom.sh
        source $GITHUB_WORKSPACE/action_app_build.sh
        app_build
     
    - name: release apk
      if: steps.check_release.outputs.if_release == 'true'
      id: release_apk
      shell: bash
      run: |
        function set_env() { echo "$1=$2" >> $GITHUB_ENV; }
        if [ -f $APP_BUILD_APK ]; then
            echo ::set-output name=if_publish::true
            set_env APP_RELEASE_NAME $APP_UPLOAD_NAME.apk
            set_env APP_RELEASE      $APP_BUILD_APK
        fi

    - name: create release
      id: create_release
      if: steps.release_apk.outputs.if_publish == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.APP_UPLOAD_NAME }}
        release_name: ${{ env.APP_UPLOAD_NAME }}
        body_path: ${{ env.APP_LATEST_BODY }}
        draft: false
        prerelease: false
    
    - name: upload release asset
      id: upload-release-asset 
      if: steps.release_apk.outputs.if_publish == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ env.APP_RELEASE }}
        asset_name: ${{ env.APP_RELEASE_NAME }}
        asset_content_type: application/vnd.android.package-archive
        
    - name: update info
      if: success()
      shell: bash
      env:
        APP_DOWNLOAD: ${{ steps.upload-release-asset.outputs.browser_download_url }}
      run: source $GITHUB_WORKSPACE/action_update.sh
      
  build_apk:
    if: github.event_name != 'schedule'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      if: github.repository_owner == github.actor
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-  

    - name: set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 14

    - name: set env
      shell: bash
      env:
        SECRETS_APP_NAME: ${{ secrets.APP_NAME }}
        SECRETS_GIT_URL: ${{ secrets.GIT_URL }}
        SECRETS_SUFFIX: ${{ secrets.SUFFIX }}
        SECRETS_ENABLE: ${{ secrets.ENABLE }}
        SECRETS_MINIFY: ${{ secrets.MINIFY }}
        SECRETS_RENAME: ${{ secrets.RENAME }}
        REPO_OWNER: ${{ github.repository_owner }}
        REPO_ACTOR: ${{ github.actor }}
        SECRETS_TAG: ${{ secrets.TAG }}
        SECRETS_LAUNCH_NAME: ${{ secrets.LAUNCH_NAME }}
      run: source $GITHUB_WORKSPACE/action_setenv.sh
      
    - name: clone code
      shell: bash
      run: source $GITHUB_WORKSPACE/action_clone.sh

    - name: custom your app
      shell: bash
      run: |
        source $GITHUB_WORKSPACE/action_app_custom.sh

    - name: build  your app
      shell: bash
      run: |
        source $GITHUB_WORKSPACE/action_app_build.sh
        app_build

    - name: upload artifact
      uses: actions/upload-artifact@master
      if: always()
      with:
        name: ${{ env.APP_UPLOAD_NAME }}
        path: ${{ env.APP_UPLOAD }}
  
    - name: upload to webdav
      shell: bash
      env:
        WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
        WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
        WEBDAV_PASS: ${{ secrets.WEBDAV_PASS }}
        WEBDAV_UPLOAD: ${{ secrets.WEBDAV_UPLOAD }}
      run: |
        source $GITHUB_WORKSPACE/action_upload.sh
        webdav_upload $APP_UPLOAD/*.apk
        
